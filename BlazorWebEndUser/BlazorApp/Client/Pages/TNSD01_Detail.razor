@using Insure.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@inject grpcInsureService.grpcInsureServiceClient insureServiceClient;
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MyAppBarForm Title="Chi tiết sản phẩm" ShowCloseButton=true>
    <ChildContent>
        <!--Avatar-->
        <div class="p-2" style="text-align:center">
            <MudAvatar Size="Size.Large" Color="Color.Primary" Variant="Variant.Outlined" Image="@("data:image/png;base64," + Convert.ToBase64String(Model.LogoContent))" Alt="Vendor Avatar" />
        </div>

        <!--ProductName-->
        <MudText Typo="Typo.h5" Align=Align.Center Style="font-weight: bold">@Model.ProductName</MudText>
        <!--VendorName-->
        <div class="d-flex justify-content-center align-items-center">
            <div class="mr-3">
                <MudAvatar Size="Size.Medium" Color="Color.Secondary" Variant="Variant.Outlined" Image="@("data:image/png;base64," + Convert.ToBase64String(Model.VendorLogoContent))" Alt="Vendor Avatar" />
            </div>
            <div>
                <MudText Typo="Typo.h6" Align=Align.Center Class="text-muted">@Model.VendorName</MudText>
            </div>
        </div>
        <!--InsureAmount-->
        <div class="d-flex justify-space-between align-center px-2 m-2" style="border-radius: 5px; background-color:#ebe8f2; height: 40px; font-size: large; font-weight:bold; color: #180653">
            <div>
                Số tiền bảo hiểm:
            </div>
            <div>
                @(Model.InsureAmount.ToString("N0") + "đ")
            </div>
        </div>

        <!--Specifications_1-->
        <MudText Typo="Typo.h6" Style="font-weight: bold">@Title_0</MudText>
        <div style="margin: 8px 8px 8px 24px; word-wrap: break-word;">
            @((MarkupString)Content_0)
        </div>

        @if (Model.Specifications != null && Model.Specifications.Count > 0)
        {
            <MyPanels Elevation=1>
                @foreach (var item in Specifications)
                {
                    <MyPanel Title=@item.Title IsInitiallyExpanded=false>
                        <div style="margin: 8px 8px 8px 48px; word-wrap: break-word;">
                            @((MarkupString)item.Content)
                        </div>
                    </MyPanel>
                }
            </MyPanels>
        }

        <!--Product link-->
        @if (!string.IsNullOrWhiteSpace(Model.VendorLinks))
        {
            <div m-2>
                <MudLink Href="@Model.VendorLinks" Underline="Underline.Always">Chi tiết sản phẩm nhà cung cấp</MudLink>
            </div>
        }
        @if (!string.IsNullOrWhiteSpace(Model.QALinks))
        {
            <div m-2>
                <MudLink Href="@Model.QALinks" Underline="Underline.Always">Những câu hỏi thường gặp</MudLink>
            </div>
        }


    </ChildContent>
    <ActionButtons>
        <div class="d-flex align-end">
            <MudText Typo="Typo.h5" Style="font-weight: bold; color: #2453c4">@(Model.UnitPrice.ToString("N0") + "đ")</MudText>
            <MudText Typo="Typo.inherit" Class="text-muted ml-1" Style="font-weight: bold; color: gray">/năm</MudText>
        </div>
        <div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ShoppingCartCheckout" OnClick="SelectBuy">Chọn mua</MudButton>
        </div>
    </ActionButtons>
</MyAppBarForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ProductModel Model { get; set; }
    //
    List<SpecificationModel> Specifications = new List<SpecificationModel>();
    string Title_0 = "";
    string Content_0 = "";


    //OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //Split specifications
        if (Model.Specifications != null && Model.Specifications.Count > 0)
        {
            Title_0 = Model.Specifications[0].Title;
            Content_0 = Model.Specifications[0].Content;

            //Remain list
            for (var i = 1; i < Model.Specifications.Count; i++)
            {
                Specifications.Add(Model.Specifications[i]);
            }
        }
    }

    //SelectBuy
    async void SelectBuy()
    {
        var parameters = new DialogParameters();
        parameters.Add("Product", Model);
        //
        var result = await DialogService.Show<TNSD01_SO_Step1>("", parameters, MyOptions.ShowAppbarOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var ret = (MyDialogResult)result.Data;
            if (ret.IsCloseAll)
            {
                MudDialog.Close();
            }
        }
    }


    //
}


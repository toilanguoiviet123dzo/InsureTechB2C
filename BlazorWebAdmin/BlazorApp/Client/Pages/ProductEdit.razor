@using Resource.Services
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MyPopupEdit Title="Nhập sản phẩm"
             T="ProductModel"
             Model="DspModel"
             ReadOnly="@ReadOnly"
             Width=@MyFormSize.Small
             OnCancelClick="OnCancel"
             OnSubmitClick="OnSubmit">

    <div class="d-flex">
        <MudTextField Label="Mã" @bind-Value="DspModel.ProductID" For="@(() => DspModel.ProductID)" Class="mr-2" Style="text-transform: uppercase" AutoFocus=true />
        <MyComboBox @ref="@RefProductType" Literal="Loại" @bind-Value="SelectedProductType" Data="@ProductTypeList" TextFieldName="@(nameof(OptionListModel.ItemName))" />
        <MudAvatar Class="mr-4" Size="Size.Large" Image="@("data:image/png;base64," + Convert.ToBase64String(DspModel.LogoContent))" Alt="Product Avatar" />
        <MyImageUpLoad Id="ProductLogo"
                       CategoryID="@ProductLogo_CategoryID"
                       OwnerID="@DspModel.ProductID"
                       IsMakeThumbnail=true
                       IsMakeFullImage=false
                       SingleImage=true
                       ThumbnailHeight=200
                       ThumbnailWidth=200
                       Icon=@Icons.Material.Filled.Create
                       Size=Size.Small
                       SecureLevel="@WebUserCredential.DocumentLevel"
                       OnSubmit="@((List<UpLoadFileModel> files) => LoadProductLogo_Handle(files))" />
    </div>
    <MudTextField Label="Tên" @bind-Value="DspModel.ProductName" For="@(() => DspModel.ProductName)" />

    <div class="d-flex align-center">
        <MyComboBox @ref="@RefVendor" Literal="Nhà cung cấp" @bind-Value="SelectedVendor" Data="@VendorList" TextFieldName="@(nameof(OptionListModel.ItemName))" />
        <MudAvatar Class="mr-4" Size="Size.Large" Image="@("data:image/png;base64," + Convert.ToBase64String(DspModel.VendorLogoContent))" Alt="Vendor Avatar" />
        <MyImageUpLoad Id="VendorLogo"
                       CategoryID="@VendorLogo_CategoryID"
                       OwnerID="@DspModel.ProductID"
                       IsMakeThumbnail=true
                       IsMakeFullImage=false
                       SingleImage=true
                       ThumbnailHeight=200
                       ThumbnailWidth=200
                       Icon=@Icons.Material.Filled.Create
                       Size=Size.Small
                       SecureLevel="@WebUserCredential.DocumentLevel"
                       OnSubmit="@((List<UpLoadFileModel> files) => LoadVendorLogo_Handle(files))" />
    </div>
    <div class="d-flex">
        <MudNumericField Label="Số tiền bảo hiểm" @bind-Value="DspModel.InsureAmount" Min=1.0 Max=999999999.0 For="@(() => DspModel.InsureAmount)" HideSpinButtons="true" Format="N0" T="double" Class="mr-2" Style="color:maroon; font-weight:bold" />
        <MudNumericField Label="Giá bán" @bind-Value="DspModel.UnitPrice" Min=1.0 Max=9999999.0 For="@(() => DspModel.UnitPrice)" HideSpinButtons="true" Format="N0" T="double" Style="color:blue; font-weight:bold" />
    </div
    <div class="d-flex">
        <MudTextField Label="Phí bán thêm" @bind-Value="DspModel.ExtraPriceName" />
        <MudNumericField Label="Giá bán" @bind-Value="DspModel.ExtraPrice" Min=1.0 Max=9999999.0 For="@(() => DspModel.UnitPrice)" HideSpinButtons="true" Format="N0" T="double" Style="color:blue; font-weight:bold" />
    </div>
    <div class="d-flex">
        <MudNumericField Class="mr-2" Label="% VAT" @bind-Value="DspModel.TaxRate" Min=0.0 Max=99.0 For="@(() => DspModel.TaxRate)" HideSpinButtons="true" Format="N0" T="double" />
        <MudSwitch @bind-Checked="@DspModel.IsIncludeVAT" Color="Color.Secondary">Bao gồm VAT</MudSwitch>
    </div>
    <div class="d-flex align-center">
        <MudNumericField Class="mr-2" Label="Thời hạn" @bind-Value="DspModel.Duration" Min=1 Max=99 For="@(() => DspModel.Duration)" HideSpinButtons="true" Format="N0" T="int" Style="width:4rem; color:purple; font-weight:bold" />
        <MudRadioGroup @bind-SelectedOption="@DspModel.DurationUnit">
            <MudRadio Option="@("Ngày")" Color="Color.Primary">Ngày</MudRadio>
            <MudRadio Option="@("Tháng")" Color="Color.Warning">Tháng</MudRadio>
            <MudRadio Option="@("Năm")" Color="Color.Secondary">Năm</MudRadio>
        </MudRadioGroup>
    </div>
    <MudTextField Label="Link chi tiết sp" @bind-Value="DspModel.VendorLinks" />
    <MudTextField Label="Link Q&A" @bind-Value="DspModel.QALinks" />
    <MudTextField @bind-Value="@BuyPolicyDisplayText"
                  Label="Chính sách mua bảo hiểm"
                  OnAdornmentClick="Show_BuyPolicy"
                  Variant="Variant.Text"
                  Adornment="Adornment.End"
                  ReadOnly=true
                  AdornmentIcon="@Icons.Filled.Create"
                  AdornmentColor="Color.Secondary" />
    <br />
    <!--Specifications-->
    <MyDataGrid @ref="@grid"
                T="SpecificationModel"
                Title="Danh sách đặc tả chỉ tiết sản phẩm"
                Items="@DspModel.Specifications"
                RowsPerPage=100
                ShowSearchBox="false"
                ShowPager=false
                IsAddNew="true"
                IsDelete="true"
                OnAddRow="@(() => OnAddRow_Handle())"
                OnViewRow="@((SpecificationModel row) => OnViewRow_Handle(row))"
                OnDeleteRow="@((SpecificationModel row) => OnDeleteRow_Handle(row))">
        <ColGroup>
            <col style="width: 2rem;" />
            <col style="width: 15rem;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SpecificationModel, object>(x => x.DspOrder)">No.</MudTableSortLabel></MudTh>
            <MudTh>Tiêu đề</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="text-align:center;">@context.DspOrder</MudTd>
            <MudTd Style="font-weight:bold;color:blue">@context.Title</MudTd>
        </RowTemplate>
    </MyDataGrid>
</MyPopupEdit>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ProductModel Model { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;
    //
    ProductModel DspModel = new ProductModel();
    // Detail data
    MyDataGrid<SpecificationModel> grid;
    // Master
    private List<OptionListModel> VendorList = new List<OptionListModel>();
    private List<OptionListModel> ProductTypeList = new List<OptionListModel>();
    //Selected
    OptionListModel SelectedVendor;
    OptionListModel SelectedProductType;
    MyComboBox<OptionListModel> RefVendor;
    MyComboBox<OptionListModel> RefProductType;
    //Logo
    string ProductLogo_CategoryID = "001";
    string VendorLogo_CategoryID = "002";
    //
    string BuyPolicyDisplayText = "";

    //OnParametersSet
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        //Display data
        ClassHelper.CopyPropertiesData(Model, DspModel);

        //VAT rate * 100
        DspModel.TaxRate = DspModel.TaxRate * 100;

        //SelectedVendor
        if (!string.IsNullOrWhiteSpace(DspModel.VendorID)) SelectedVendor = VendorList.Find(x => x.ItemCode == DspModel.VendorID);

        //SelectedProductType
        if (!string.IsNullOrWhiteSpace(DspModel.ProductType)) SelectedProductType = ProductTypeList.Find(x => x.ItemCode == DspModel.ProductType);

        //Specifications
        DspModel.Specifications.Clear();
        if (Model.Specifications != null)
        {
            foreach (var item in Model.Specifications)
            {
                var copyItem = new SpecificationModel();
                ClassHelper.CopyPropertiesData(item, copyItem);
                DspModel.Specifications.Add(copyItem);
            }
        }

        //Logo
        DspModel.LogoContent = await masterService.GetThumbnail(Model.LogoID);
        DspModel.VendorLogoContent = await masterService.GetThumbnail(Model.VendorLogoID);

        //BuyPolicy
        BuyPolicyDisplayText = "";
        if (!string.IsNullOrWhiteSpace(DspModel.BuyPolicy))
        {
            BuyPolicyDisplayText = "Đã nhập";
        }
    }

    //Cancel
    private void OnCancel()
    {
        MudDialog.Cancel();
    }

    //Submit
    private void OnSubmit()
    {
        //Validate
        if (!Validate()) return;

        ClassHelper.CopyPropertiesData(DspModel, Model);

        //VAT rate / 100
        Model.TaxRate = Model.TaxRate / 100;

        //SelectedVendor
        if (SelectedVendor != null)
        {
            Model.VendorID = SelectedVendor.ItemCode;
            Model.VendorName = SelectedVendor.ItemName;
        }
        //SelectedProductType
        if (SelectedProductType != null)
        {
            Model.ProductType = SelectedProductType.ItemCode;
        }

        //Specifications
        Model.Specifications.Clear();
        if (DspModel.Specifications != null)
        {
            foreach (var item in DspModel.Specifications)
            {
                Model.Specifications.Add(item);
            }
        }

        //Return changed
        MudDialog.Close(DialogResult.Ok(Model));
    }

    bool Validate()
    {
        //Product type
        if (SelectedProductType == null)
        {
            Snackbar.Add("Chưa nhập loại", Severity.Error);
            RefProductType.Focus();
            return false;
        }

        //Title
        if (SelectedVendor == null)
        {
            Snackbar.Add("Chưa nhập nhà cung cấp", Severity.Error);
            RefVendor.Focus();
            return false;
        }
        //
        return true;
    }

    //OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //SelectedVendor
        if (!string.IsNullOrWhiteSpace(Model.VendorID)) SelectedVendor = VendorList.Find(x => x.ItemCode == Model.VendorID);
    }

    //LoadMaster
    async Task LoadMaster()
    {
        VendorList = await masterService.Load_OptionList("001");
        ProductTypeList = await masterService.Load_OptionList("002");
    }

    //Add row
    async void OnAddRow_Handle()
    {
        //Init new row
        var newRow = new SpecificationModel();
        newRow.DspOrder = Get_MaxDspOrder();
        newRow.RecNo = MyCodeGenerator.GenRecNo();
        //
        var parameters = new DialogParameters();
        parameters.Add("Model", newRow);
        //
        var result = await DialogService.Show<SpecificationEdit>("", parameters, MyOptions.GetEditorOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (SpecificationModel)result.Data;

            //Add to grid
            DspModel.Specifications.Add(retModel);
            grid.Refresh();
        }
    }
    //Update row
    async void OnViewRow_Handle(SpecificationModel row)
    {
        var parameters = new DialogParameters();
        parameters.Add("Model", row);
        //
        var result = await DialogService.Show<SpecificationEdit>("", parameters, MyOptions.GetEditorOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (SpecificationModel)result.Data;
            var updateReccord = DspModel.Specifications.Find(x => x.RecNo == retModel.RecNo);
            if (updateReccord != null)
            {
                //Update to Grid
                ClassHelper.CopyPropertiesData(retModel, updateReccord);
                grid.Refresh();
            }
        }
    }

    //Delete row
    void OnDeleteRow_Handle(SpecificationModel row)
    {
        DspModel.Specifications.Remove(row);
        grid.Refresh();
    }

    private int Get_MaxDspOrder()
    {
        if (DspModel.Specifications != null && DspModel.Specifications.Count > 0)
        {
            return DspModel.Specifications.Max(x => x.DspOrder) + 1;
        }
        return 1;
    }

    void LoadProductLogo_Handle(List<UpLoadFileModel> files)
    {
        if (files != null && files.Count > 0)
        {
            DspModel.LogoID = files[0].ResourceID;
            DspModel.LogoContent = files[0].FileContent;
            //
            this.StateHasChanged();
        }
    }

    void LoadVendorLogo_Handle(List<UpLoadFileModel> files)
    {
        if (files != null && files.Count > 0)
        {
            DspModel.VendorLogoID = files[0].ResourceID;
            DspModel.VendorLogoContent = files[0].FileContent;
            //
            this.StateHasChanged();
        }
    }

    async void Show_BuyPolicy()
    {
        var row = new SpecificationModel();
        row.Title = "Chính sách mua bảo hiểm";
        row.Content = DspModel.BuyPolicy;
        var parameters = new DialogParameters();
        parameters.Add("Model", row);
        //
        var result = await DialogService.Show<SpecificationEdit>("", parameters, MyOptions.GetEditorOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (SpecificationModel)result.Data;
            DspModel.BuyPolicy = retModel.Content;
            BuyPolicyDisplayText = "";
            if (!string.IsNullOrWhiteSpace(DspModel.BuyPolicy))
            {
                BuyPolicyDisplayText = "Đã nhập";
            }
            //
            this.StateHasChanged();
        }
    }

}

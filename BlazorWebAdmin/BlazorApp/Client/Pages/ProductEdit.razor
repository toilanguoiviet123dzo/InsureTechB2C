@using Resource.Services
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MyPopupEdit Title="Nhập sản phẩm"
             T="ProductModel"
             Model="DspModel"
             ReadOnly="@ReadOnly"
             Width=@MyFormSize.Medium
             OnCancelClick="OnCancel"
             OnSubmitClick="OnSubmit">

    <div class="d-flex align-center">
        <MudTextField Label="Mã" @bind-Value="DspModel.ProductID" For="@(() => DspModel.ProductID)" Class="mr-2" Style="text-transform: uppercase" AutoFocus=true />
        <MyComboBox @ref="@RefProductType" Literal="Loại" @bind-Value="SelectedProductType" Data="@ProductTypeList" TextFieldName="@(nameof(OptionListModel.ItemName))" />
        <MudAvatar Class="mr-4" Size="Size.Large" Image="@("data:image/png;base64," + Convert.ToBase64String(DspModel.LogoContent))" Alt="Product Avatar" />
        <MyImageUpLoad Id="ProductLogo"
                       CategoryID="@ProductLogo_CategoryID"
                       OwnerID="@DspModel.ProductID"
                       IsMakeThumbnail=true
                       IsMakeFullImage=false
                       SingleImage=true
                       ThumbnailHeight=200
                       ThumbnailWidth=200
                       Icon=@Icons.Filled.CloudUpload
                       Size=Size.Small
                       SecureLevel="0"
                       OnSubmit="@((List<UpLoadFileModel> files) => LoadProductLogo_Handle(files))" />
    </div>
    <MudTextField Label="Tên" @bind-Value="DspModel.ProductName" For="@(() => DspModel.ProductName)" />

    <div class="d-flex align-center">
        <MyComboBox @ref="@RefVendor" Literal="Nhà cung cấp" @bind-Value="SelectedVendor" Data="@VendorList" TextFieldName="@(nameof(OptionListModel.ItemName))" />
        <MudAvatar Class="mr-4" Size="Size.Large" Image="@("data:image/png;base64," + Convert.ToBase64String(DspModel.VendorLogoContent))" Alt="Vendor Avatar" />
        <MyImageUpLoad Id="VendorLogo"
                       CategoryID="@VendorLogo_CategoryID"
                       OwnerID="@DspModel.ProductID"
                       IsMakeThumbnail=true
                       IsMakeFullImage=false
                       SingleImage=true
                       ThumbnailHeight=200
                       ThumbnailWidth=200
                       Icon=@Icons.Filled.CloudUpload
                       Size=Size.Small
                       SecureLevel="0"
                       OnSubmit="@((List<UpLoadFileModel> files) => LoadVendorLogo_Handle(files))" />
    </div>
    <div class="d-flex justify-start align-center">
        <div style="width: 50%">
            <MudNumericField Class="mr-2" Label="% VAT" @bind-Value="DspModel.TaxRate" Min=0.0 Max=99.0 For="@(() => DspModel.TaxRate)" HideSpinButtons="true" Format="N0" T="double" />
        </div>
        <div style="width: 50%">
            <MudSwitch @bind-Checked="@DspModel.IsIncludeVAT" Color="Color.Secondary">Bao gồm VAT</MudSwitch>
        </div>
    </div>

    <!--Sale packages-->
    <div class="mt-4">
        <MyDataGrid @ref="@grid"
                    T="SalePackageModel"
                    Title="Danh sách gói bán"
                    Items="@DspModel.SalePackages"
                    RowsPerPage=100
                    ShowSearchBox="false"
                    ShowPager=false
                    IsAddNew="true"
                    IsDelete="true"
                    OnAddRow="@(() => OnAddRow_Handle())"
                    OnViewRow="@((SalePackageModel row) => OnViewRow_Handle(row))"
                    OnDeleteRow="@((SalePackageModel row) => OnDeleteRow_Handle(row))">
            <ColGroup>
                <col style="width: 2rem;" />
                <col style="width: 12rem;" />
                <col style="width: 10rem;" />
                <col style="width: 10rem;" />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SalePackageModel, object>(x => x.PackageID)">No.</MudTableSortLabel></MudTh>
                <MudTh>Tên gói</MudTh>
                <MudTh>Phí</MudTh>
                <MudTh>Mức trách nhiệm</MudTh>
                <MudTh>Ghi chú</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align:center;">@context.PackageID</MudTd>
                <MudTd>@context.PackageName</MudTd>
                <MudTd Style="font-weight:600;color:blue;text-align:right">@context.UnitPrice.ToString("N0")</MudTd>
                <MudTd Style="font-weight:600;color:maroon;text-align:right">@context.BenefitAmount.ToString("N0")</MudTd>
                <MudTd>@context.Notes</MudTd>
            </RowTemplate>
        </MyDataGrid>
    </div>

    <div class="mt-4">
        <MyPanels>
            <MyPanel Title="Flash card" IsInitiallyExpanded=false>
                <!--Flash card-->
                <div style="height:300px; overflow-y:scroll">
                    <div>
                        <MyImageUpLoad Id="FlashCard"
                                       CategoryID="@Flascard_CategoryID"
                                       OwnerID="@DspModel.ProductID"
                                       IsMakeThumbnail=true
                                       IsMakeFullImage=false
                                       SingleImage=true
                                       ThumbnailHeight=200
                                       ThumbnailWidth=200
                                       Icon=@Icons.Filled.CloudUpload
                                       Size=Size.Small
                                       SecureLevel="0"
                                       OnSubmit="@((List<UpLoadFileModel> files) => FlashCard_Handle(files))" />
                    </div>
                    <div>
                        <MudImage Src="@("data:image/png;base64," + Convert.ToBase64String(DspModel.FlashCardContent))"
                                  Fluid=true
                                  Alt="Flash card"
                                  Elevation="25"
                                  Class="rounded-lg ma-2" />
                    </div>
                </div>
            </MyPanel>

            <MyPanel Title="Ảnh gói bán" IsInitiallyExpanded=false>
                <!--Flash card-->
                <div style="height:400px; overflow-y:scroll">
                    <div>
                        <MyImageUpLoad Id="SaleImage"
                                       CategoryID="@Flascard_CategoryID"
                                       OwnerID="@DspModel.ProductID"
                                       IsMakeThumbnail=true
                                       IsMakeFullImage=false
                                       SingleImage=true
                                       ThumbnailHeight=200
                                       ThumbnailWidth=200
                                       Icon=@Icons.Filled.CloudUpload
                                       Size=Size.Small
                                       SecureLevel="0"
                                       OnSubmit="@((List<UpLoadFileModel> files) => SaleImage_Handle(files))" />
                    </div>
                    <div>
                        <MudImage Src="@("data:image/png;base64," + Convert.ToBase64String(DspModel.SaleImageContent))"
                                  Fluid=true
                                  Alt="Flash card"
                                  Elevation="25"
                                  Class="rounded-lg ma-2" />
                    </div>
                </div>
            </MyPanel>
        </MyPanels>
    </div>


</MyPopupEdit>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ProductModel Model { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;
    //
    ProductModel DspModel = new ProductModel();
    // Detail data
    MyDataGrid<SalePackageModel> grid;
    // Master
    private List<OptionListModel> VendorList = new List<OptionListModel>();
    private List<OptionListModel> ProductTypeList = new List<OptionListModel>();
    //Selected
    OptionListModel SelectedVendor;
    OptionListModel SelectedProductType;
    MyComboBox<OptionListModel> RefVendor;
    MyComboBox<OptionListModel> RefProductType;
    //Logo
    string ProductLogo_CategoryID = "001";
    string VendorLogo_CategoryID = "002";
    string Flascard_CategoryID = "003";
    string SaleImage_CategoryID = "004";
    //
    string BuyPolicyDisplayText = "";

    //OnParametersSet
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        //Display data
        ClassHelper.CopyPropertiesData(Model, DspModel);

        //VAT rate * 100
        DspModel.TaxRate = DspModel.TaxRate * 100;

        //SelectedVendor
        if (!string.IsNullOrWhiteSpace(DspModel.VendorID)) SelectedVendor = VendorList.Find(x => x.ItemCode == DspModel.VendorID);

        //SelectedProductType
        if (!string.IsNullOrWhiteSpace(DspModel.ProductType)) SelectedProductType = ProductTypeList.Find(x => x.ItemCode == DspModel.ProductType);

        //SalePackages
        DspModel.SalePackages.Clear();
        if (Model.SalePackages != null)
        {
            foreach (var item in Model.SalePackages)
            {
                var copyItem = new SalePackageModel();
                ClassHelper.CopyPropertiesData(item, copyItem);
                DspModel.SalePackages.Add(copyItem);
            }
        }

        //Load images
        DspModel.LogoContent = await masterService.GetThumbnail(Model.LogoID);
        DspModel.VendorLogoContent = await masterService.GetThumbnail(Model.VendorLogoID);
        DspModel.FlashCardContent = await masterService.GetImage(Model.FlashCardID);
        DspModel.SaleImageContent = await masterService.GetImage(Model.SaleImageID);
    }

    //Cancel
    private void OnCancel()
    {
        MudDialog.Cancel();
    }

    //Submit
    private void OnSubmit()
    {
        //Validate
        if (!Validate()) return;

        ClassHelper.CopyPropertiesData(DspModel, Model);

        //VAT rate / 100
        Model.TaxRate = Model.TaxRate / 100;

        //SelectedVendor
        if (SelectedVendor != null)
        {
            Model.VendorID = SelectedVendor.ItemCode;
            Model.VendorName = SelectedVendor.ItemName;
        }
        //SelectedProductType
        if (SelectedProductType != null)
        {
            Model.ProductType = SelectedProductType.ItemCode;
        }

        //SalePackages
        Model.SalePackages.Clear();
        if (DspModel.SalePackages != null)
        {
            foreach (var item in DspModel.SalePackages)
            {
                Model.SalePackages.Add(item);
            }
        }

        //Return changed
        MudDialog.Close(DialogResult.Ok(Model));
    }

    bool Validate()
    {
        //Product type
        if (SelectedProductType == null)
        {
            Snackbar.Add("Chưa nhập loại", Severity.Error);
            RefProductType.Focus();
            return false;
        }

        //Title
        if (SelectedVendor == null)
        {
            Snackbar.Add("Chưa nhập nhà cung cấp", Severity.Error);
            RefVendor.Focus();
            return false;
        }
        //
        return true;
    }

    //OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //SelectedVendor
        if (!string.IsNullOrWhiteSpace(Model.VendorID)) SelectedVendor = VendorList.Find(x => x.ItemCode == Model.VendorID);
    }

    //LoadMaster
    async Task LoadMaster()
    {
        VendorList = await masterService.Load_OptionList("001");
        ProductTypeList = await masterService.Load_OptionList("002");
    }

    //Add row
    async void OnAddRow_Handle()
    {
        //Init new row
        var newRow = new SalePackageModel();
        //
        var parameters = new DialogParameters();
        parameters.Add("Model", newRow);
        //
        var result = await DialogService.Show<SalePackageEdit>("", parameters, MyOptions.ShowEditorOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (SalePackageModel)result.Data;

            //Add to grid
            DspModel.SalePackages.Add(retModel);
            grid.Refresh();
        }
    }
    //Update row
    async void OnViewRow_Handle(SalePackageModel row)
    {
        var parameters = new DialogParameters();
        parameters.Add("Model", row);
        //
        var result = await DialogService.Show<SalePackageEdit>("", parameters, MyOptions.ShowEditorOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (SalePackageModel)result.Data;
            var updateReccord = DspModel.SalePackages.Find(x => x.PackageID == retModel.PackageID);
            if (updateReccord != null)
            {
                //Update to Grid
                ClassHelper.CopyPropertiesData(retModel, updateReccord);
                grid.Refresh();
            }
        }
    }

    //Delete row
    void OnDeleteRow_Handle(SalePackageModel row)
    {
        DspModel.SalePackages.Remove(row);
        grid.Refresh();
    }

    void LoadProductLogo_Handle(List<UpLoadFileModel> files)
    {
        if (files != null && files.Count > 0)
        {
            DspModel.LogoID = files[0].ResourceID;
            DspModel.LogoContent = files[0].FileContent;
            //
            this.StateHasChanged();
        }
    }

    void LoadVendorLogo_Handle(List<UpLoadFileModel> files)
    {
        if (files != null && files.Count > 0)
        {
            DspModel.VendorLogoID = files[0].ResourceID;
            DspModel.VendorLogoContent = files[0].FileContent;
            //
            this.StateHasChanged();
        }
    }

    void FlashCard_Handle(List<UpLoadFileModel> files)
    {
        if (files != null && files.Count > 0)
        {
            DspModel.FlashCardID = files[0].ResourceID;
            DspModel.FlashCardContent = files[0].FileContent;
            //
            this.StateHasChanged();
        }
    }

    void SaleImage_Handle(List<UpLoadFileModel> files)
    {
        if (files != null && files.Count > 0)
        {
            DspModel.SaleImageID = files[0].ResourceID;
            DspModel.SaleImageContent = files[0].FileContent;
            //
            this.StateHasChanged();
        }
    }


}

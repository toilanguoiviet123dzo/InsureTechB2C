@using Insure.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@inject grpcInsureService.grpcInsureServiceClient insureServiceClient;
@inject MasterService masterService;
@inject VoucherService voucherService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MyAppBarForm Title="Thông tin mua bảo hiểm" ShowCloseButton=true>
    <ChildContent>
        <MyPanels>
            <MyPanel Title="Thông tin chủ hợp đồng">
                <MyTextEdit Literal="Điện thoại"
                            IsFontBold=true
                            AutoFocus=true
                            Text=@Model.CusPhone
                            TextChanged="@((string text) => CusPhone_TextChanged(text))"
                            @ref=RefCusPhone />
                <MyTextEdit Literal="Họ và tên chủ xe"
                            IsFontBold=true
                            Text=@Model.CusFullname
                            TextChanged="@((string text) => OwnerFullname_TextChanged(text))"
                            @ref=RefCusFullname />
                @*<MyTextEdit Literal="CMND/CCCD"
                    IsFontBold=true
                    Mask=@DigitMask
                    @bind-Text=@Model.CusCitizenID
                    @ref=RefCusCitizenID />*@
                <MyTextEdit Literal="Email"
                            TextColor=@MyTextColor.Blue
                            @bind-Text=@Model.CusEmail
                            @ref=RefCusEmail />
                <MyDateEdit Literal="Ngày hiệu lực"
                            TabStop=false
                            MinDate=@DateTime.Now.AddDays(-1)
                            @bind-Date=@Model.EffectiveSttDate
                            @ref=RefEffectiveSttDate />

                <div class="row align-items-end">
                    <div class="col-6">
                        <MyTextEdit Literal="Biển số xe"
                                    IsFontBold=true
                                    IsUpperCase=true
                                    TextColor=@MyTextColor.Blue
                                    Mask=@licensePlateMask
                                    Text=@Model.LicensePlate
                                    TextChanged="@((string text) => LicensePlate_TextChanged(text))"
                                    @ref=RefLicensePlate />
                    </div>
                    @if (!BrowserInfo.IsMobile)
                    {
                        <div class="col-6">
                            <MyCheckBox Literal="@FormatText"
                                    TabStop=false
                                    CheckedChanged="@((bool value) => UseFormat_Changed(value))"
                                    Checked=@UseFormat_LicLicensePlate />
                        </div>
                    }
                </div>
                @*<MyComboBox Value="SelectedCity"
                    Data="CityList"
                    TValue=AddressModel
                    ValueChanged="@((AddressModel value) => CityChanged_Handle(value))"
                    Clearable="true"
                    TextFieldName="@(nameof(AddressModel.ItemName))"
                    Literal="Tỉnh thành phố"
                    @ref="@RefCity" />
                    <MyComboBox Value="SelectedDistrict"
                    Data="DistrictList"
                    ValueChanged="@((AddressModel value) => DistrictChanged_Handle(value))"
                    Clearable="true"
                    TextFieldName="@(nameof(AddressModel.ItemName))"
                    Literal="Quận huyện"
                    @ref="@RefDistrict" />
                    <MyComboBox Value="SelectedWard"
                    Data="WardList"
                    ValueChanged="@((AddressModel value) => WardChanged_Handle(value))"
                    Clearable="true"
                    TextFieldName="@(nameof(AddressModel.ItemName))"
                    Literal="Phường xã"
                    @ref="@RefWard" />
                    <MyTextEdit Literal="Địa chỉ"
                    @bind-Text=Model.Address
                    @ref=RefAddress />*@
            </MyPanel>

            @*<MyPanel Title="Thông tin xe">
                <MyTextEdit Literal="Họ và tên chủ xe"
                IsFontBold=true
                TabStop=false
                @bind-Text=@Model.OwnerFullname
                @ref=RefOwnerFullname />
                <div class="row align-items-end">
                <div class="col-6">
                <MyTextEdit Literal="Biển số xe"
                IsFontBold=true
                IsUpperCase=true
                TextColor=@MyTextColor.Blue
                Mask=@licensePlateMask
                @bind-Text=Model.LicensePlate
                @ref=RefLicensePlate />
                </div>
                @if (!BrowserInfo.IsMobile)
                {
                <div class="col-6">
                <MyCheckBox Literal="@FormatText"
                TabStop=false
                CheckedChanged="@((bool value) => UseFormat_Changed(value))"
                Checked=@UseFormat_LicLicensePlate />
                </div>
                }
                </div>

                </MyPanel>*@

            <MyPanel Title="Chọn hoặc nhập mã giảm giá">
                <MudTextField @bind-Value="@DiscountText"
                              OnAdornmentClick=SelectDiscountCode_Click
                              Label="Mã giảm giá"
                              ReadOnly=true
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Filled.Search"
                              AdornmentColor="Color.Secondary" />
            </MyPanel>

        </MyPanels>

        <p class="text-muted text-justify m-3">
            Lưu ý: Giấy chứng nhận bảo hiểm bắt buộc và trách nhiệm dân sự và bảo hiểm tự nguyện chủ xe mô tô - xe gắn máy
            được cấp Giấy chứng nhận bảo hiểm điện tử qua email hoặc tin nhắn SMS.
        </p>
    </ChildContent>
    <ActionButtons>
        <div class="d-flex align-end">
            <MudText Typo="Typo.h5" Style="font-weight: bold; color: #2453c4">@(Model.PaymentAmount.ToString("N0") + "đ")</MudText>
            <MudText Typo="Typo.inherit" Class="text-muted ml-1" Style="font-weight: bold; color: gray">/năm</MudText>
        </div>
        <div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.ArrowForwardIos" OnClick="SelectGo">Tiếp tục</MudButton>
        </div>
    </ActionButtons>
</MyAppBarForm>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ProductModel Product { get; set; }
    [Parameter] public string ProductID { get; set; } = "";
    [Parameter] public string DiscountCode { get; set; } = "";
    //SO
    SaleOrderModel Model = new SaleOrderModel();
    //Master
    List<AddressModel> CityList = new List<AddressModel>();
    List<AddressModel> DistrictList = new List<AddressModel>();
    List<AddressModel> WardList = new List<AddressModel>();
    //Selected
    AddressModel SelectedCity;
    AddressModel SelectedDistrict;
    AddressModel SelectedWard;
    //Ref
    MyTextEdit RefCusFullname;
    MyTextEdit RefCusCitizenID;
    MyTextEdit RefCusEmail;
    MyTextEdit RefCusPhone;
    MyTextEdit RefAddress;
    MyTextEdit RefOwnerFullname;
    MyTextEdit RefLicensePlate;
    MyDateEdit RefEffectiveSttDate;
    MyComboBox<AddressModel> RefCity;
    MyComboBox<AddressModel> RefDistrict;
    MyComboBox<AddressModel> RefWard;
    //format
    string FormatText = "Nhập theo định dạng";
    bool UseFormat_LicLicensePlate = true;
    IMask licensePlateMask;
    public IMask DigitMask;
    string DiscountText = "";

    //OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //Input mask
        if (!BrowserInfo.IsMobile)
        {
            licensePlateMask = new PatternMask("00-a0 00.000");
            DigitMask = new RegexMask(@"^\d+$");
        }

        //Load city list
        //CityList = await masterService.Load_CityList();

        //Display main
        await DisplayMain();
    }

    async Task DisplayMain()
    {
        try
        {
            //Load product from parameters
            if (Product == null && !string.IsNullOrWhiteSpace(ProductID))
            {
                Product = new ProductModel();
                //
                var requestString = new Insure.Services.String_Request()
                    {
                        Credential = new Insure.Services.UserCredential()
                        {
                            Username = WebUserCredential.Username,
                            RoleID = WebUserCredential.RoleID,
                            AccessToken = WebUserCredential.AccessToken,
                            ApiKey = WebUserCredential.ApiKey
                        },
                        StringValue = ProductID
                    };

                //
                var response = await insureServiceClient.GetProductAsync(requestString);
                if (response != null && response.ReturnCode == GrpcReturnCode.OK)
                {
                    ClassHelper.CopyPropertiesDataDateConverted(response.Record, Product);

                    //Specifications
                    if (response.Record.Specifications != null)
                    {
                        foreach (var item in response.Record.Specifications)
                        {
                            var specItem = new SpecificationModel();
                            ClassHelper.CopyPropertiesData(item, specItem);
                            //
                            Product.Specifications.Add(specItem);
                        }
                    }

                    //Logo
                    Product.LogoContent = await masterService.GetThumbnail(Product.LogoID);
                    Product.VendorLogoContent = await masterService.GetThumbnail(Product.VendorLogoID);
                }

                //Get discount code
                var discountItem = await masterService.CheckDiscountCode(DiscountCode);
                if (discountItem != null)
                {
                    Model.DiscountCode = discountItem.DiscountCode;
                    Model.DiscountName = discountItem.DiscountName;
                    Model.DiscountRate = discountItem.DiscountRate;
                    Model.DiscountAmount = discountItem.DiscountAmount;
                    //
                    if (Model.DiscountRate != 0)
                    {
                        Model.DiscountAmount = Math.Round(Model.DiscountRate * Product.UnitPrice, 0);
                        Model.PaymentAmount = Model.Amount - Model.DiscountAmount;
                    }
                    DiscountText = $"{Model.DiscountAmount.ToString("N0")}đ - {Model.DiscountName}";
                }
            }

            //CreateSO
            //Set Product
            Model.OrderID = MyCodeGenerator.GenRecNo(); // await voucherService.Get_NewVoucherNo("001");
            Model.ProductType = Product.ProductType;
            Model.VendorID = Product.VendorID;
            Model.VendorName = Product.VendorName;
            Model.ProductID = Product.ProductID;
            Model.ProductName = Product.ProductName;
            Model.Duration = Product.Duration;
            Model.DurationUnit = Product.DurationUnit;
            Model.Quantity = 1;
            Model.UnitPrice = Product.UnitPrice;
            Model.Amount = Product.UnitPrice;
            Model.PaymentAmount = Model.Amount - Model.DiscountAmount;
            Model.IsIncludeVAT = Product.IsIncludeVAT;
            Model.TaxRate = Product.TaxRate;
            Model.TaxAmount = Math.Round(Model.Amount * Product.TaxRate, 0);
            Model.EffectiveSttDate = DateTime.Now;
            Model.LogoContent = Product.LogoContent;
            Model.VendorLogoContent = Product.VendorLogoContent;
            Model.BuyPolicy = Product.BuyPolicy;
            //Mode
            Model.ModifiedOn = DateTime.Now;
            Model.UpdMode = 1;

        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }

    //UseFormat_Changed
    void UseFormat_Changed(bool useFormat)
    {
        UseFormat_LicLicensePlate = useFormat;
        if (useFormat)
        {
            FormatText = "Nhập theo định dạng";
            licensePlateMask = new PatternMask("00-a0 00.000");
        }
        else
        {
            FormatText = "Nhập tự do";
            licensePlateMask = null;
        }
    }

    ////City
    //async void CityChanged_Handle(AddressModel value)
    //{
    //    SelectedCity = value;
    //    //Clear district
    //    SelectedDistrict = null;
    //    //Load district list
    //    if (SelectedCity != null) DistrictList = await masterService.Load_DistrictList(SelectedCity.ItemID);

    //    //Show District
    //    await RefDistrict.ToggleMenu();
    //}
    ////Distric
    //async void DistrictChanged_Handle(AddressModel value)
    //{
    //    SelectedDistrict = value;
    //    //Clear Ward
    //    SelectedWard = null;
    //    //Load Ward list
    //    if (SelectedCity != null && SelectedDistrict != null)
    //    {
    //        WardList = await masterService.Load_WardList(SelectedCity.ItemID, SelectedDistrict.ItemID);
    //    }

    //    //Show Ward
    //    await RefWard.ToggleMenu();
    //}
    ////Ward
    //void WardChanged_Handle(AddressModel value)
    //{
    //    SelectedWard = value;
    //    //Focus to address
    //    RefAddress.Focus();
    //}

    void OwnerFullname_TextChanged(string text)
    {
        Model.CusFullname = text.Beautify_VnName();
        //
        if (string.IsNullOrWhiteSpace(Model.OwnerFullname))
        {
            Model.OwnerFullname = Model.CusFullname;
        }
    }

    async void CusPhone_TextChanged(string text)
    {
        Model.CusPhone = text;

        //Lookup history
        if (!string.IsNullOrWhiteSpace(Model.CusPhone) && string.IsNullOrWhiteSpace(Model.CusFullname))
        {
            var requestString = new Insure.Services.GetSaleOrderByPhone_Request()
                {
                    Credential = new Insure.Services.UserCredential()
                    {
                        Username = WebUserCredential.Username,
                        RoleID = WebUserCredential.RoleID,
                        AccessToken = WebUserCredential.AccessToken,
                        ApiKey = WebUserCredential.ApiKey
                    },
                    ProductID = Model.ProductID,
                    CusPhone = Model.CusPhone
                };

            //Get data from DB
            var response = await insureServiceClient.GetSaleOrderByPhoneAsync(requestString);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                Model.OwnerFullname = response.Record.OwnerFullname;
                Model.CusFullname = response.Record.CusFullname;
                Model.CusEmail = response.Record.CusEmail;
                Model.CusCitizenID = response.Record.CusCitizenID;
                //Model.CityID = response.Record.CityID;
                //Model.CityName = response.Record.CityName;
                //Model.DistrictID = response.Record.DistrictID;
                //Model.DistrictName = response.Record.DistrictName;
                //Model.WardID = response.Record.WardID;
                //Model.WardName = response.Record.WardName;
                //Model.Address = response.Record.Address;
                //Model.PostalCode = response.Record.PostalCode;

                ////Load district list
                //DistrictList = await masterService.Load_DistrictList(Model.CityID);
                ////Load Ward list
                //WardList = await masterService.Load_WardList(Model.CityID, Model.DistrictID);

                ////Seleted combobox
                //SelectedCity = CityList.Find(x => x.ItemID == Model.CityID);
                //SelectedDistrict = DistrictList.Find(x => x.ItemID == Model.DistrictID);
                //SelectedWard = WardList.Find(x => x.ItemID == Model.WardID);

                //Same product
                if (response.IsMatchByProduct)
                {
                    Model.LicensePlate = response.Record.LicensePlate;
                    Model.EffectiveSttDate = response.Record.EffectiveEndDate.ToDateTime().AddDays(1);
                }

                //
                this.StateHasChanged();

                //Focus to LicensePlate
                RefLicensePlate.Focus();

                //Validate to clear error
                Validate_Main();
            }
        }
    }

    async void LicensePlate_TextChanged(string text)
    {
        Model.LicensePlate = text;
        Model.EffectiveSttDate = DateTime.Now;
        this.StateHasChanged();
        //Duplicated check
        var res = await DuplicatedCheck();
    }

    //OnBlur_CusEmail
    //async void OnBlur_CusEmail(FocusEventArgs e)
    //{
    //    //Show City
    //    if (SelectedCity == null)
    //    {
    //        await RefCity.ToggleMenu();
    //    }
    //}


    //Validate
    bool Validate_Main()
    {
        bool validateResult = true;

        //Clear error
        //RefOwnerFullname.ClearError();
        RefLicensePlate.ClearError();
        RefCusFullname.ClearError();
        //RefCusCitizenID.ClearError();
        RefCusPhone.ClearError();
        RefCusEmail.ClearError();
        //RefCity.ClearError();
        //RefDistrict.ClearError();
        //RefWard.ClearError();
        //RefAddress.ClearError();



        //RefOwnerFullname
        //if (string.IsNullOrWhiteSpace(Model.OwnerFullname))
        //{
        //    RefOwnerFullname.Focus();
        //    RefOwnerFullname.SetError("Bắt buộc nhập");
        //    validateResult = false;
        //}

        //RefCusPhone
        if (string.IsNullOrWhiteSpace(Model.CusPhone))
        {
            RefCusPhone.Focus();
            RefCusPhone.SetError("Bắt buộc nhập");
            validateResult = false;
        }
        else if (!Model.CusPhone.IsPhoneNumber())
        {
            RefCusPhone.Focus();
            RefCusPhone.SetError("Số điện thoại không hợp lệ");
            validateResult = false;
        }
        //RefCusFullname
        if (string.IsNullOrWhiteSpace(Model.CusFullname))
        {
            RefCusFullname.Focus();
            RefCusFullname.SetError("Bắt buộc nhập");
            validateResult = false;
        }
        //RefCusEmail required if CusPhone blank
        if (string.IsNullOrWhiteSpace(Model.CusPhone))
        {
            if (string.IsNullOrWhiteSpace(Model.CusEmail))
            {
                RefCusEmail.Focus();
                RefCusEmail.SetError("Bắt buộc nhập");
                validateResult = false;
            }
            else if (!Model.CusEmail.IsEmail())
            {
                RefCusEmail.Focus();
                RefCusEmail.SetError("Email không hợp lệ");
                validateResult = false;
            }
        }

        //RefLicensePlate
        if (string.IsNullOrWhiteSpace(Model.LicensePlate))
        {
            RefLicensePlate.Focus();
            RefLicensePlate.SetError("Bắt buộc nhập");
            validateResult = false;
        }

        ////RefCusCitizenID
        //if (string.IsNullOrWhiteSpace(Model.CusCitizenID))
        //{
        //    RefCusCitizenID.Focus();
        //    RefCusCitizenID.SetError("Bắt buộc nhập");
        //    validateResult = false;
        //}


        ////City
        //if (SelectedCity == null)
        //{
        //    RefCity.Focus();
        //    RefCity.SetError("Bắt buộc nhập");
        //    validateResult = false;
        //}
        ////District
        //if (SelectedDistrict == null)
        //{
        //    RefDistrict.Focus();
        //    RefDistrict.SetError("Bắt buộc nhập");
        //    validateResult = false;
        //}
        ////Ward
        //if (SelectedWard == null)
        //{
        //    RefWard.Focus();
        //    RefWard.SetError("Bắt buộc nhập");
        //    validateResult = false;
        //}
        ////Address
        //if (string.IsNullOrWhiteSpace(Model.Address))
        //{
        //    RefAddress.Focus();
        //    RefAddress.SetError("Bắt buộc nhập");
        //    validateResult = false;
        //}
        //
        return validateResult;
    }

    async void SelectGo()
    {
        //Validate
        if (!Validate_Main()) return;

        //City
        if (SelectedCity != null)
        {
            Model.CityID = SelectedCity.ItemID;
            Model.CityName = SelectedCity.ItemName;
        }
        //District
        if (SelectedDistrict != null)
        {
            Model.DistrictID = SelectedDistrict.ItemID;
            Model.DistrictName = SelectedDistrict.ItemName;
        }
        //Ward
        if (SelectedWard != null)
        {
            Model.WardID = SelectedWard.ItemID;
            Model.WardName = SelectedWard.ItemName;
        }
        Model.CusFullname = Model.CusFullname.Beautify_VnName();
        //EffectiveEndDate
        if (Model.DurationUnit == "Ngày") Model.EffectiveEndDate = Model.EffectiveSttDate.AddDays(Model.Duration);
        if (Model.DurationUnit == "Tháng") Model.EffectiveEndDate = Model.EffectiveSttDate.AddMonths(Model.Duration);
        if (Model.DurationUnit == "Năm") Model.EffectiveEndDate = Model.EffectiveSttDate.AddYears(Model.Duration);

        //Duplicated check
        var isDuplicated = await DuplicatedCheck();
        if (isDuplicated) return;

        //Next step
        var parameters = new DialogParameters();
        parameters.Add("Model", Model);
        //
        var result = await DialogService.Show<TNSD01_SO_Step2>("", parameters, MyOptions.ShowAppbarOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var ret = (MyDialogResult)result.Data;
            if (ret.IsCloseAll)
            {
                var ret2 = new MyDialogResult();
                ret2.IsCloseAll = true;
                //
                MudDialog.Close(ret2);
            }
        }
    }

    private async Task<bool> DuplicatedCheck()
    {
        try
        {
            var request = new DuplicatedCheck_Request();
            var Credential = new Insure.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            request.EffectiveSttDate = Model.EffectiveSttDate.ToTimestampFromLocalTime();
            request.ProductID = Model.ProductID;
            request.LicensePlate = Model.LicensePlate;
            //
            var response = await insureServiceClient.DuplicatedCheckAsync(request);
            // Duplicated
            if (response != null && response.ReturnCode == GrpcReturnCode.Error_201)
            {
                Snackbar.Add(response.MsgCode, Severity.Error);
                Model.EffectiveSttDate = response.EffectiveEndDate.ToLocalDateFromTimestamp().AddDays(1);
                this.StateHasChanged();
                return true;
            }
            //Server error
            if (response == null && response.ReturnCode != GrpcReturnCode.OK)
            {
                Snackbar.Add(MyMessage.Error_ServerError, Severity.Error);
                return true;
            }
        }
        catch { }
        //
        return false;
    }

    //Select discount code
    async void SelectDiscountCode_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProductID", Model.ProductID);
        //
        var result = await DialogService.Show<DiscountCodeSelector>("", parameters, MyOptions.ShowPopupOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var ret = (DiscountCodeModel)result.Data;
            Model.DiscountCode = ret.DiscountCode;
            Model.DiscountName = ret.DiscountName;
            Model.DiscountRate = ret.DiscountRate;
            Model.DiscountAmount = ret.DiscountAmount;
            //
            if (Model.DiscountRate != 0)
            {
                Model.DiscountAmount = Math.Round(Model.DiscountRate * Model.Amount, 0);
            }
            Model.PaymentAmount = Model.Amount - Model.DiscountAmount;
            if (Model.PaymentAmount < 0)
            {
                Model.PaymentAmount = 0;
                Model.DiscountAmount = Model.UnitPrice;
            }
            DiscountText = $"{Model.DiscountAmount.ToString("N0")}đ - {Model.DiscountName}";
            this.StateHasChanged();
        }
    }

}


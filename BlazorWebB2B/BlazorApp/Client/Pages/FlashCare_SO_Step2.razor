@using System.Threading;
@using Insure.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@inject grpcInsureService.grpcInsureServiceClient insureServiceClient;
@inject MasterService masterService;
@inject SettingService settingService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject NavigationManager NavManager

<MyAppBarForm Title="Thanh toán" ShowCloseButton=true Width="700px">
    <ChildContent>
        <MyPanels>
            <!--Thông tin chương trình bảo hiểm-->
            <MyPanel Title="Thông tin chương trình bảo hiểm">
                <div class="container-fluid p-0">
                    <!--ProductName-->
                    <div class="row m-1 m-lg-2 align-items-center">
                        <div class="col">
                            <MudAvatar Size="Size.Large" Color="Color.Primary" Variant="Variant.Outlined" Image="@("data:image/png;base64," + Convert.ToBase64String(Model.VendorLogoContent))" Alt="Vendor Avatar" />
                        </div>
                        <div class="col font-weight-bold text-right">
                            @Model.ProductName
                        </div>
                    </div>

                    <!--VendorName-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Nhà cung cấp
                        </div>
                        <div class="col font-weight-bold text-right">
                            @Model.VendorName
                        </div>
                    </div>
                    <!--EffectiveSttDate-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Ngày hiệu lực
                        </div>
                        <div class="col font-weight-bold text-right">
                            @Model.EffectiveSttDate.ToString("dd/MM/yyyy") ~ @Model.EffectiveEndDate.ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <!--thoi han-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Thời hạn
                        </div>
                        <div class="col font-weight-bold text-right">
                            @Model.Duration @Model.DurationUnit
                        </div>
                    </div>
                    <!--Độ tuổi-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Độ tuổi
                        </div>
                        <div class="col font-weight-bold text-right">
                            @if (Model.TargetID == "1")
                            {
                                <span>1 đến 17 tuổi</span>
                            }
                            @if (Model.TargetID == "2")
                            {
                                <span>18 đến 60 tuổi</span>
                            }
                            @if (Model.TargetID == "3")
                            {
                                <span>61 đến 65 tuổi</span>
                            }
                        </div>
                    </div>
                    <!--Gói bảo hiểm-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Gói bảo hiểm
                        </div>
                        <div class="col font-weight-bold text-right">
                            @if (Model.SalePackageID == "1")
                            {
                                <span>BASIC</span>
                            }
                            @if (Model.SalePackageID == "2")
                            {
                                <span>STANDARD</span>
                            }
                            @if (Model.SalePackageID == "3")
                            {
                                <span>PREMIUM</span>
                            }
                        </div>
                    </div>
                </div>
            </MyPanel>

            <!--Thông tin chủ hợp đồng-->
            <MyPanel Title="Thông tin chủ hợp đồng">
                <div class="container-fluid p-0">
                    <!--CusFullname-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Người được bảo hiểm
                        </div>
                        <div class="col font-weight-bold text-right">
                            @Model.Fullname
                        </div>
                    </div>
                    <!--Sex-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Giới tính
                        </div>
                        <div class="col font-weight-bold text-right">
                            @if (Model.Sex == "1")
                            {
                                <span>Nam</span>
                            }
                            @if (Model.Sex == "2")
                            {
                                <span>Nữ</span>
                            }
                        </div>
                    </div>
                    <!--CitizenID-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Số CCCD
                        </div>
                        <div class="col font-weight-bold text-right text-blue" style="font-weight:700; font-size:larger">
                            @Model.CitizenID
                        </div>
                    </div>
                    <!--CusEmail-->
                    <div class="row m-1 m-lg-2">
                        <div class="col text-left">
                            Email liên hệ
                        </div>
                        <div class="col font-weight-bold text-right text-blue" style="font-weight:700; font-size:larger">
                            @Model.CusEmail
                        </div>
                    </div>
                </div>
            </MyPanel>

            <!--Thông tin xe-->
            <MyPanel Title="Xác nhận thông tin">
                <MyCheckBox @bind-Checked=@IsAcceptBuy>Xác nhận thông tin trên là chính xác</MyCheckBox>
            </MyPanel>
        </MyPanels>
    </ChildContent>
    <ActionButtons>
        <div class="d-flex align-end">
            <MudText Typo="Typo.h5" Style="font-weight: bold; color: #2453c4">@(Model.PaymentAmount.ToString("N0") + "đ")</MudText>
            <MudText Typo="Typo.inherit" Class="text-muted ml-1" Style="font-weight: bold; color: gray">/@Model.BuyYear năm</MudText>
        </div>
        <div class="d-flex justify-space-between gap-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="fa fa-money-check-dollar" OnClick="CashPay">Tiền mặt</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Payment" OnClick="CardPay">Thẻ tín dụng</MudButton>
        </div>
    </ActionButtons>
</MyAppBarForm>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public SaleOrderModel Model { get; set; } = new SaleOrderModel();
    //Master
    //
    bool IsAcceptBuy = false;

    //OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Vendor logoID
        Model.VendorLogoContent = await masterService.GetThumbnail(Model.VendorLogoID);
    }
    bool Validate_Main()
    {
        //RefOwnerFullname
        if (!IsAcceptBuy)
        {
            Snackbar.Add("Bạn chưa xác nhận thông tin", Severity.Error);
            return false;
        }
        //
        return true;
    }

    async void CardPay()
    {
        try
        {
            //Validate
            if (!Validate_Main()) return;

            //Init Order
            Model.PaymentChannelID = MyConstant.PaymentChannel_VnPay;
            var response = await Init_Order();
            if (response == null) return;

            //Request payment
            string paymentLink = "";
            var minPaymentAmount = await settingService.GetDouble1("018");
            if (minPaymentAmount == 0) minPaymentAmount = 5000.0;
            if (Model.PaymentAmount <= minPaymentAmount)
            {
                var internalPaymentUrl = await settingService.GetString1("019");
                paymentLink = $@"{internalPaymentUrl}{response.InitOrderToken}/{response.TransactionID}";
            }
            else
            {
                var internalPaymentUrl = await settingService.GetString1("006");
                paymentLink = $@"{internalPaymentUrl}{response.InitOrderToken}/{response.TransactionID}/{Model.PaymentChannelID}";
            }
            await JsRuntime.InvokeVoidAsync("open", paymentLink, "_blank");

            //go to product list
            var ret = new MyDialogResult();
            ret.IsCloseAll = true;
            //
            MudDialog.Close(ret);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    async void CashPay()
    {
        try
        {
            //Validate
            if (!Validate_Main()) return;

            //Init Order
            Model.PaymentChannelID = MyConstant.PaymentChannel_Cash;
            var response = await Init_Order();
            if (response == null) return;

            //Request payment
            string paymentLink = "";
            var internalPaymentUrl = await settingService.GetString1("025");
            paymentLink = $@"{internalPaymentUrl}{response.InitOrderToken}/{response.TransactionID}";
            await JsRuntime.InvokeVoidAsync("open", paymentLink, "_blank");

            //go to product list
            var ret = new MyDialogResult();
            ret.IsCloseAll = true;
            //
            MudDialog.Close(ret);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    async Task<InitOrder_Response> Init_Order()
    {
        InitOrder_Response response = null;
        try
        {
            var request = new InitOrder_Request();
            var Credential = new Insure.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //Account
            Model.AccountID = WebUserCredential.Username;
            Model.MerchantID = WebUserCredential.MerchantID;
            // Convert to DB row
            request.Record = new grpcSaleOrderModel();
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.Record);
            // Call api
            response = await insureServiceClient.InitOrderAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                Snackbar.Add("Khởi tạo thanh toán thất bại", Severity.Error);
                return null;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Khởi tạo thanh toán thất bại" + Environment.NewLine + ex.Message, Severity.Error);
            return null;
        }
        return response;
    }

    //
}

